from __future__ import annotations

import io
import os
import pickle
from datetime import datetime
from typing import Optional

from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.http import MediaIoBaseUpload


class YouTubeScheduler:
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π, –Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –∫–ª–∞—Å—Å –¥–ª—è:
      ‚Ä¢ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä—è–º–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —Å –æ–±–ª–æ–∂–∫–æ–π;
      ‚Ä¢ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –µ—ë —á–∞—Ç.

    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
      ‚Ä¢ –í–∫–ª—é—á—ë–Ω YouTube Data API v3 –Ω–∞ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ GCP;
      ‚Ä¢ –£—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ ¬´—Ç–≤–æ—Ä—á–µ—Å–∫–æ–π —Å—Ç—É–¥–∏–∏¬ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –ø—Ä—è–º—ã—Ö —ç—Ñ–∏—Ä–æ–≤.
    """

    SCOPES: list[str] = ["https://www.googleapis.com/auth/youtube.force-ssl"]

    def __init__(
        self,
        client_secrets_path: str,
        token_path: str = "token.pickle",
    ) -> None:
        self.client_secrets_path = client_secrets_path
        self.token_path = token_path
        self.youtube = self._authorize()

    # ---------- –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã ----------

    def create_broadcast(
        self,
        title: str,
        description: str,
        start_time_iso8601: str,
        thumbnail_bytes: Optional[bytes] = None,
    ) -> str:
        """
        –°–æ–∑–¥–∞—ë—Ç —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±–ª–æ–∂–∫—É.

        Args:
            title:        –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏.
            description:  –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑—Ä–∏—Ç–µ–ª–µ–π.
            start_time_iso8601: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç ¬´YYYY‚ÄëMM‚ÄëDDTHH:MM:SSZ¬ª).
            thumbnail_bytes:    JPEG‚Äë–æ–±–ª–æ–∂–∫–∞ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ –±–∞–π—Ç.

        Returns:
            broadcast_id: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏.
        """
        request_body = {
            "snippet": {
                "title": title,
                "description": description,
                "scheduledStartTime": start_time_iso8601,
            },
            "status": {"privacyStatus": "private"},
            "contentDetails": {
                "enableAutoStart": True,
                "enableAutoStop": True,
            },
        }

        try:
            response = (
                self.youtube.liveBroadcasts()
                .insert(part="snippet,status,contentDetails", body=request_body)
                .execute()
            )
            broadcast_id: str = response["id"]
            print(f"‚úì –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ (ID = {broadcast_id})")

            if thumbnail_bytes:
                self._upload_thumbnail(broadcast_id, thumbnail_bytes)

            return broadcast_id

        except HttpError as exc:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ YouTube API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: {exc}") from exc

    def send_live_chat_message(self, broadcast_id: str, text: str) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏.

        Args:
            broadcast_id: ID —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏.
            text:         –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        live_chat_id = self._get_live_chat_id(broadcast_id)
        if not live_chat_id:
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å liveChatId –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏")

        body = {
            "snippet": {
                "liveChatId": live_chat_id,
                "type": "textMessageEvent",
                "textMessageDetails": {"messageText": text},
            }
        }

        try:
            self.youtube.liveChatMessages().insert(part="snippet", body=body).execute()
            print("‚úì –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç")
        except HttpError as exc:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ YouTube API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {exc}") from exc

    # ---------- –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã ----------

    def _authorize(self):
        creds = None
        if os.path.exists(self.token_path):
            with open(self.token_path, "rb") as token_file:
                creds = pickle.load(token_file)

        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file(
                    self.client_secrets_path, self.SCOPES
                )
                creds = flow.run_local_server(port=0)
            with open(self.token_path, "wb") as token_file:
                pickle.dump(creds, token_file)

        return build("youtube", "v3", credentials=creds, cache_discovery=False)

    def _upload_thumbnail(self, video_id: str, thumbnail_bytes: bytes) -> None:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç JPEG‚Äë–æ–±–ª–æ–∂–∫—É, –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –º–∞—Å—Å–∏–≤–æ–º –±–∞–π—Ç.
        """
        media = MediaIoBaseUpload(io.BytesIO(thumbnail_bytes), mimetype="image/jpeg")
        try:
            self.youtube.thumbnails().set(videoId=video_id, media_body=media).execute()
            print("‚úì –û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except HttpError as exc:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏: {exc}") from exc

    def _get_live_chat_id(self, broadcast_id: str) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç liveChatId –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏.
        """
        try:
            resp = (
                self.youtube.liveBroadcasts()
                .list(part="snippet", id=broadcast_id)
                .execute()
            )
            items = resp.get("items", [])
            if not items:
                return None
            return items[0]["snippet"].get("liveChatId")
        except HttpError as exc:
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å liveChatId: {exc}") from exc


# ------------------------------ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ------------------------------
if __name__ == "__main__":
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É OAuth 2.0 client_secrets.json (—Å–∫–∞—á–∞–π—Ç–µ –∏–∑ Google Cloud Console).
    CLIENT_SECRETS_PATH = "C:\\Users\\admin\\PycharmProjects\\streaming-scripts\\secrets\\youtube_secret.json"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    yt = YouTubeScheduler(CLIENT_SECRETS_PATH)

    # –ù–∞—Å—Ç—Ä–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞
    TITLE = "–ú–æ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è"
    DESCRIPTION = "–≠—Ç–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ YouTube Data API."
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1‚ÄØ—á–∞—Å –≤ ISO‚Äë—Ñ–æ—Ä–º–∞—Ç–µ (UTC)
    START_TIME = (
        datetime.utcnow().replace(microsecond=0).isoformat(sep="T") + "Z"
    )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º JPEG‚Äë—Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å -> bytes
    with open("thumbnail.png", "rb") as f:
        THUMBNAIL_BYTES = f.read()

    # –®–∞–≥ 1. –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é
    broadcast_id = yt.create_broadcast(
        title=TITLE,
        description=DESCRIPTION,
        start_time_iso8601=START_TIME,
        thumbnail_bytes=THUMBNAIL_BYTES,
    )

    # –®–∞–≥ 2. –ü–∏—à–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —á–∞—Ç (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ —ç—Ñ–∏—Ä –Ω–∞—á–Ω—ë—Ç—Å—è)
    yt.send_live_chat_message(broadcast_id, "–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! üé•")
